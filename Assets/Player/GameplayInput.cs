//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.3
//     from Assets/Player/GameplayInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameplayInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameplayInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameplayInput"",
    ""maps"": [
        {
            ""name"": ""Rolling"",
            ""id"": ""0187f686-f34f-45a6-9af6-cd3dae433b89"",
            ""actions"": [
                {
                    ""name"": ""RollDirection"",
                    ""type"": ""Value"",
                    ""id"": ""6727e85d-1c3c-46fb-9ace-0f87b8ca8ea5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TurnCamera"",
                    ""type"": ""PassThrough"",
                    ""id"": ""70a33b50-6611-4914-9f29-a0804f683ff1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""85da16a7-57d3-4f3d-b01c-73f8d0a70302"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShootGrapple"",
                    ""type"": ""Button"",
                    ""id"": ""5c719fa0-4427-4904-8f57-22fa268700cb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""d8f73f2d-9cbf-41b9-a6a0-d39dafd84860"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RollDirection"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4287a161-34c9-47ab-968f-6b1ace845730"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseNKeyboard"",
                    ""action"": ""RollDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3f5686fd-836e-40ae-ba51-ee97963e16c0"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseNKeyboard"",
                    ""action"": ""RollDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""979a0fe2-812b-4c75-b537-222bfaf7656d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseNKeyboard"",
                    ""action"": ""RollDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""75799f67-7f5c-482f-a5c1-76c9f1035c14"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseNKeyboard"",
                    ""action"": ""RollDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c7d365ad-343e-4f98-9735-9cdd9a766864"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseNKeyboard"",
                    ""action"": ""TurnCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""97c13369-2b96-4ee9-9c6c-fdf78ce2c80d"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseNKeyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d7e21b2a-73ba-44ba-a546-53b5636a19de"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseNKeyboard"",
                    ""action"": ""ShootGrapple"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Godmode"",
            ""id"": ""fac571d2-cba4-411a-9e1a-7f055c8c8b4b"",
            ""actions"": [
                {
                    ""name"": ""MovementDirection"",
                    ""type"": ""Value"",
                    ""id"": ""0fc94428-c95c-48ab-9d51-c181e73ee67a"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Toggle"",
                    ""type"": ""Button"",
                    ""id"": ""e9907434-26b8-4263-953e-1f66a441a34d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""3D Vector"",
                    ""id"": ""8a75c40e-c2ad-4bfc-af25-783852fc4cb6"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementDirection"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7af0cc87-4f7a-48f8-850d-9ef74f6f4bab"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""deb1657b-d24a-4c45-bf2c-0410c5e79733"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""609f9a7c-8bde-4e8e-b80f-93711e96fe8f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""7337abd6-e6b6-44a2-b570-4f52216ee09c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""6662df2b-93ab-4d92-9880-b5a184237a53"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""7d22b312-06a7-410d-870b-0311822e80ba"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""389a272d-2732-425e-97ce-2d201f080a81"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Toggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""MouseNKeyboard"",
            ""bindingGroup"": ""MouseNKeyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Rolling
        m_Rolling = asset.FindActionMap("Rolling", throwIfNotFound: true);
        m_Rolling_RollDirection = m_Rolling.FindAction("RollDirection", throwIfNotFound: true);
        m_Rolling_TurnCamera = m_Rolling.FindAction("TurnCamera", throwIfNotFound: true);
        m_Rolling_Jump = m_Rolling.FindAction("Jump", throwIfNotFound: true);
        m_Rolling_ShootGrapple = m_Rolling.FindAction("ShootGrapple", throwIfNotFound: true);
        // Godmode
        m_Godmode = asset.FindActionMap("Godmode", throwIfNotFound: true);
        m_Godmode_MovementDirection = m_Godmode.FindAction("MovementDirection", throwIfNotFound: true);
        m_Godmode_Toggle = m_Godmode.FindAction("Toggle", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Rolling
    private readonly InputActionMap m_Rolling;
    private IRollingActions m_RollingActionsCallbackInterface;
    private readonly InputAction m_Rolling_RollDirection;
    private readonly InputAction m_Rolling_TurnCamera;
    private readonly InputAction m_Rolling_Jump;
    private readonly InputAction m_Rolling_ShootGrapple;
    public struct RollingActions
    {
        private @GameplayInput m_Wrapper;
        public RollingActions(@GameplayInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @RollDirection => m_Wrapper.m_Rolling_RollDirection;
        public InputAction @TurnCamera => m_Wrapper.m_Rolling_TurnCamera;
        public InputAction @Jump => m_Wrapper.m_Rolling_Jump;
        public InputAction @ShootGrapple => m_Wrapper.m_Rolling_ShootGrapple;
        public InputActionMap Get() { return m_Wrapper.m_Rolling; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RollingActions set) { return set.Get(); }
        public void SetCallbacks(IRollingActions instance)
        {
            if (m_Wrapper.m_RollingActionsCallbackInterface != null)
            {
                @RollDirection.started -= m_Wrapper.m_RollingActionsCallbackInterface.OnRollDirection;
                @RollDirection.performed -= m_Wrapper.m_RollingActionsCallbackInterface.OnRollDirection;
                @RollDirection.canceled -= m_Wrapper.m_RollingActionsCallbackInterface.OnRollDirection;
                @TurnCamera.started -= m_Wrapper.m_RollingActionsCallbackInterface.OnTurnCamera;
                @TurnCamera.performed -= m_Wrapper.m_RollingActionsCallbackInterface.OnTurnCamera;
                @TurnCamera.canceled -= m_Wrapper.m_RollingActionsCallbackInterface.OnTurnCamera;
                @Jump.started -= m_Wrapper.m_RollingActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_RollingActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_RollingActionsCallbackInterface.OnJump;
                @ShootGrapple.started -= m_Wrapper.m_RollingActionsCallbackInterface.OnShootGrapple;
                @ShootGrapple.performed -= m_Wrapper.m_RollingActionsCallbackInterface.OnShootGrapple;
                @ShootGrapple.canceled -= m_Wrapper.m_RollingActionsCallbackInterface.OnShootGrapple;
            }
            m_Wrapper.m_RollingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @RollDirection.started += instance.OnRollDirection;
                @RollDirection.performed += instance.OnRollDirection;
                @RollDirection.canceled += instance.OnRollDirection;
                @TurnCamera.started += instance.OnTurnCamera;
                @TurnCamera.performed += instance.OnTurnCamera;
                @TurnCamera.canceled += instance.OnTurnCamera;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @ShootGrapple.started += instance.OnShootGrapple;
                @ShootGrapple.performed += instance.OnShootGrapple;
                @ShootGrapple.canceled += instance.OnShootGrapple;
            }
        }
    }
    public RollingActions @Rolling => new RollingActions(this);

    // Godmode
    private readonly InputActionMap m_Godmode;
    private IGodmodeActions m_GodmodeActionsCallbackInterface;
    private readonly InputAction m_Godmode_MovementDirection;
    private readonly InputAction m_Godmode_Toggle;
    public struct GodmodeActions
    {
        private @GameplayInput m_Wrapper;
        public GodmodeActions(@GameplayInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @MovementDirection => m_Wrapper.m_Godmode_MovementDirection;
        public InputAction @Toggle => m_Wrapper.m_Godmode_Toggle;
        public InputActionMap Get() { return m_Wrapper.m_Godmode; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GodmodeActions set) { return set.Get(); }
        public void SetCallbacks(IGodmodeActions instance)
        {
            if (m_Wrapper.m_GodmodeActionsCallbackInterface != null)
            {
                @MovementDirection.started -= m_Wrapper.m_GodmodeActionsCallbackInterface.OnMovementDirection;
                @MovementDirection.performed -= m_Wrapper.m_GodmodeActionsCallbackInterface.OnMovementDirection;
                @MovementDirection.canceled -= m_Wrapper.m_GodmodeActionsCallbackInterface.OnMovementDirection;
                @Toggle.started -= m_Wrapper.m_GodmodeActionsCallbackInterface.OnToggle;
                @Toggle.performed -= m_Wrapper.m_GodmodeActionsCallbackInterface.OnToggle;
                @Toggle.canceled -= m_Wrapper.m_GodmodeActionsCallbackInterface.OnToggle;
            }
            m_Wrapper.m_GodmodeActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MovementDirection.started += instance.OnMovementDirection;
                @MovementDirection.performed += instance.OnMovementDirection;
                @MovementDirection.canceled += instance.OnMovementDirection;
                @Toggle.started += instance.OnToggle;
                @Toggle.performed += instance.OnToggle;
                @Toggle.canceled += instance.OnToggle;
            }
        }
    }
    public GodmodeActions @Godmode => new GodmodeActions(this);
    private int m_MouseNKeyboardSchemeIndex = -1;
    public InputControlScheme MouseNKeyboardScheme
    {
        get
        {
            if (m_MouseNKeyboardSchemeIndex == -1) m_MouseNKeyboardSchemeIndex = asset.FindControlSchemeIndex("MouseNKeyboard");
            return asset.controlSchemes[m_MouseNKeyboardSchemeIndex];
        }
    }
    public interface IRollingActions
    {
        void OnRollDirection(InputAction.CallbackContext context);
        void OnTurnCamera(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnShootGrapple(InputAction.CallbackContext context);
    }
    public interface IGodmodeActions
    {
        void OnMovementDirection(InputAction.CallbackContext context);
        void OnToggle(InputAction.CallbackContext context);
    }
}
